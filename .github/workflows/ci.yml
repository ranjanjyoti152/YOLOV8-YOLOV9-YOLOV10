name: YOLO Training CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install ultralytics
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test script imports
      run: |
        python -c "from scripts.train_yolov8 import YOLOv8Trainer; print('YOLOv8 import success')"
        python -c "from scripts.train_yolov9 import YOLOv9Trainer; print('YOLOv9 import success')"
        python -c "from scripts.train_yolov10 import YOLOv10Trainer; print('YOLOv10 import success')"
        python -c "from utils.metrics import MetricsTracker; print('Metrics import success')"
        python -c "from utils.visualization import VisualizationManager; print('Visualization import success')"
    
    - name: Test configuration loading
      run: |
        python -c "from configs.config import get_default_config; config = get_default_config('yolov8n'); print('Config loading success')"
    
    - name: Run basic functionality tests
      run: |
        python scripts/prepare_data.py --action validate --dataset-path ./data --dry-run
        python -c "
        from utils.metrics import ModelMetrics, MetricsTracker
        metrics = ModelMetrics('test_model', 'test_dataset', map50=0.85)
        tracker = MetricsTracker('./results/test')
        tracker.add_metrics(metrics)
        print('Metrics functionality test passed')
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security scan with bandit
      run: |
        bandit -r scripts/ utils/ configs/ -f json -o bandit-report.json || true
    
    - name: Check dependencies for vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-report.json || true

  docker-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.10-slim

        WORKDIR /app

        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            libgl1-mesa-glx \
            libglib2.0-0 \
            libsm6 \
            libxext6 \
            libxrender-dev \
            libgomp1 \
            git \
            && rm -rf /var/lib/apt/lists/*

        # Copy requirements first for better caching
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        # Copy the rest of the application
        COPY . .

        # Create necessary directories
        RUN mkdir -p data models results logs

        # Set environment variables
        ENV PYTHONPATH=/app
        ENV TORCH_HOME=/app/.torch

        # Run setup script
        RUN python setup.py

        # Default command
        CMD ["python", "-m", "scripts.train_yolov8", "--help"]
        EOF
    
    - name: Build Docker image
      run: |
        docker build -t yolo-training:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm yolo-training:latest python -c "
        from scripts.train_yolov8 import YOLOv8Trainer
        from utils.metrics import MetricsTracker
        print('Docker image test passed')
        "
